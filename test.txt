# main.py
import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
import hashlib

# -------------------- Model --------------------
class DatabaseManager:
    def __init__(self, db_name='users.db'):
        self.db_name = db_name
        self._init_db()

    def _init_db(self):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL,
                    email TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()

    def add_user(self, username, password, email=None):
        hashed_pw = self._hash_password(password)
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO users (username, password, email)
                    VALUES (?, ?, ?)
                ''', (username, hashed_pw, email))
                conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

    def get_user(self, username):
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, username, email, created_at 
                FROM users WHERE username = ?
            ''', (username,))
            return cursor.fetchone()

    def validate_user(self, username, password):
        hashed_pw = self._hash_password(password)
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id FROM users 
                WHERE username = ? AND password = ?
            ''', (username, hashed_pw))
            return cursor.fetchone() is not None

    @staticmethod
    def _hash_password(password):
        return hashlib.sha256(password.encode()).hexdigest()

# -------------------- Controller --------------------
class AuthController:
    def __init__(self):
        self.db = DatabaseManager()
        self.current_user = None

    def signup(self, username, password, email):
        if not username or not password:
            return False, "پر کردن نام کاربری و رمز عبور الزامی است"
        
        if self.db.add_user(username, password, email):
            return True, "ثبت نام موفقیت آمیز بود!"
        return False, "نام کاربری قبلاً استفاده شده است"

    def login(self, username, password):
        if self.db.validate_user(username, password):
            user_data = self.db.get_user(username)
            self.current_user = {
                'id': user_data[0],
                'username': user_data[1],
                'email': user_data[2],
                'created_at': user_data[3]
            }
            return True, "ورود موفقیت آمیز بود!"
        return False, "نام کاربری یا رمز عبور نادرست است"

    def logout(self):
        self.current_user = None

# -------------------- Views --------------------
class LoginView(ttk.Frame):
    def __init__(self, parent, controller, switch_to_signup):
        super().__init__(parent)
        self.controller = controller
        self.switch_to_signup = switch_to_signup
        self._create_widgets()

    def _create_widgets(self):
        self.grid_columnconfigure(1, weight=1)

        ttk.Label(self, text="ورود به سیستم", font=('Arial', 14)).grid(row=0, column=0, columnspan=2, pady=20)

        ttk.Label(self, text="نام کاربری:").grid(row=1, column=0, padx=5, pady=5, sticky='e')
        self.username_entry = ttk.Entry(self)
        self.username_entry.grid(row=1, column=1, padx=5, pady=5, sticky='ew')

        ttk.Label(self, text="رمز عبور:").grid(row=2, column=0, padx=5, pady=5, sticky='e')
        self.password_entry = ttk.Entry(self, show='*')
        self.password_entry.grid(row=2, column=1, padx=5, pady=5, sticky='ew')

        btn_frame = ttk.Frame(self)
        btn_frame.grid(row=3, column=0, columnspan=2, pady=20)

        ttk.Button(btn_frame, text="ورود", command=self._login).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="ثبت نام", command=self.switch_to_signup).pack(side='left', padx=5)

    def _login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        
        success, message = self.controller.login(username, password)
        if success:
            self.master.show_dashboard()
            messagebox.showinfo("موفقیت", message)
        else:
            messagebox.showerror("خطا", message)

class SignupView(ttk.Frame):
    def __init__(self, parent, controller, switch_to_login):
        super().__init__(parent)
        self.controller = controller
        self.switch_to_login = switch_to_login
        self._create_widgets()

    def _create_widgets(self):
        self.grid_columnconfigure(1, weight=1)

        ttk.Label(self, text="ثبت نام", font=('Arial', 14)).grid(row=0, column=0, columnspan=2, pady=20)

        ttk.Label(self, text="نام کاربری:").grid(row=1, column=0, padx=5, pady=5, sticky='e')
        self.username_entry = ttk.Entry(self)
        self.username_entry.grid(row=1, column=1, padx=5, pady=5, sticky='ew')

        ttk.Label(self, text="رمز عبور:").grid(row=2, column=0, padx=5, pady=5, sticky='e')
        self.password_entry = ttk.Entry(self, show='*')
        self.password_entry.grid(row=2, column=1, padx=5, pady=5, sticky='ew')

        ttk.Label(self, text="ایمیل:").grid(row=3, column=0, padx=5, pady=5, sticky='e')
        self.email_entry = ttk.Entry(self)
        self.email_entry.grid(row=3, column=1, padx=5, pady=5, sticky='ew')

        btn_frame = ttk.Frame(self)
        btn_frame.grid(row=4, column=0, columnspan=2, pady=20)

        ttk.Button(btn_frame, text="ثبت نام", command=self._signup).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="بازگشت", command=self.switch_to_login).pack(side='left', padx=5)

    def _signup(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        email = self.email_entry.get() or None
        
        success, message = self.controller.signup(username, password, email)
        if success:
            self.switch_to_login()
            messagebox.showinfo("موفقیت", message)
        else:
            messagebox.showerror("خطا", message)

class DashboardView(ttk.Frame):
    def __init__(self, parent, user_data, logout_callback):
        super().__init__(parent)
        self.logout_callback = logout_callback
        self._create_widgets(user_data)

    def _create_widgets(self, user_data):
        ttk.Label(self, text=f"خوش آمدید {user_data['username']}", font=('Arial', 14)).pack(pady=20)

        info_frame = ttk.LabelFrame(self, text="اطلاعات کاربر")
        info_frame.pack(padx=20, pady=10, fill='x')

        labels = [
            ("شناسه کاربری:", user_data['id']),
            ("نام کاربری:", user_data['username']),
            ("ایمیل:", user_data['email'] or '-'),
            ("تاریخ عضویت:", user_data['created_at'])
        ]

        for i, (label, value) in enumerate(labels):
            ttk.Label(info_frame, text=label).grid(row=i, column=0, padx=5, pady=2, sticky='e')
            ttk.Label(info_frame, text=value).grid(row=i, column=1, padx=5, pady=2, sticky='w')

        ttk.Button(self, text="خروج", command=self.logout_callback, style='Danger.TButton').pack(pady=20)

# -------------------- Main Application --------------------
class MainApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("سیستم مدیریت کاربران")
        self.geometry("500x400")
        
        self.auth_controller = AuthController()
        self._configure_styles()
        self._setup_container()
        self.show_login()

    def _configure_styles(self):
        style = ttk.Style()
        style.configure('Danger.TButton', foreground='white', background='#dc3545')

    def _setup_container(self):
        self.container = ttk.Frame(self)
        self.container.pack(fill='both', expand=True, padx=20, pady=20)

    def show_login(self):
        self._clear_container()
        LoginView(self.container, self.auth_controller, self.show_signup).pack(fill='both', expand=True)

    def show_signup(self):
        self._clear_container()
        SignupView(self.container, self.auth_controller, self.show_login).pack(fill='both', expand=True)

    def show_dashboard(self):
        self._clear_container()
        DashboardView(
            self.container,
            self.auth_controller.current_user,
            self._logout
        ).pack(fill='both', expand=True)

    def _logout(self):
        self.auth_controller.logout()
        self.show_login()

    def _clear_container(self):
        for widget in self.container.winfo_children():
            widget.destroy()

if __name__ == "__main__":
    app = MainApp()
    app.mainloop()